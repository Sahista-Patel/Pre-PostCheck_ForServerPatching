<#
.SYNOPSIS
    This script will check the status of the database and services after patching.
    The servers whose patching have been scheduled and need to cross verify after patching,
    then two Scripts named Precheck and Postcheck build for, this scipt must be executed after patching and if Precheck script used before patching then only.
    Gives the email alert as well as HTML file with the table of all database and services status with required details and verification for passed servers in server list.
    Verification with status before patching done and displayed with OK if same otherwise knot.
    
.DESCRIPTION
    Dependent Script.
    For Name, Display Name, Pre-StartType, Post-StartType, Pre-Status, Post-Status, Verify.
    For Database Instance Name, DB Name, Pre-State, Post-State, Verify.
    It will send an email, if scheduled then it is monitoring technique for Database and Service status Pre-Post check on bunch of servers during patching.
    
.INPUTS
    Server List - txt file with the name of the machines/servers which to examine.
    jsonfile generated by Scrip -1 will be mandatory.
    Please set varibles like server list path, output file path, E-Mail id and password as and when guided by comment through code.

.EXAMPLE
    .\Precheck.ps1
    This will execute the script and gives HTML file and email with the details in body.

.NOTES
    PUBLIC
    SqlServer Module need to be installed if not than type below command in powershell prompt.
    Install-Module -Name SqlServer
    This scipt must be executed after patching and if Precheck script used before patching then only.

.AUTHOR & OWNER
    Harsh Parecha
    Sahista Patel
#>


Import-Module SqlServer

#Set Email From
$EmailFrom = “example@outlook.com”
#Set Email To
$EmailTo = “example@atos.net"
#Set Email Subject
$Subject = “Post-Check”
#Set SMTP Server Details
$SMTPServer = “smtp.outlook.com”
$SMTPClient = New-Object Net.Mail.SmtpClient($SmtpServer, 587)
$SMTPClient.Credentials = New-Object System.Net.NetworkCredential(“example@outlook.com”, “Password”);
$outpath = "C:\Precheck.json"
$d = Get-Content $outpath | ConvertFrom-Json
$servicelist = @()

$date = Get-Date

$Row = '<html>
            <head>
                <style type="text/css">
                    .tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #729ea5;border-collapse: collapse;}
                    .tftable th {font-size:12px;background-color:#acc8cc;border-width: 1px;padding: 8px;border-style: solid;border-color: #729ea5;text-align:left;}
                    .caption1 {font-size:28px;background-color:#e6983b;border-width: 1px; height: 35px;border-style: solid;border-color: #729ea5;text-align:left; vertical-align:middle; font-weight: bold;}
                    .tftable tr {background-color:#ffffff;}
                    .tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #729ea5;}
                    .tftable tr:hover {background-color:#ffff99;}
                    .OFFLINE {background-color:#ff3300;}
                    .ONLINE {background-color:#33cc33;}
                    .Not_Ok {background-color:#ff0000;}
                    .Ok {background-color:#008000;}
                </style>
                <title>Post-Checks</title>
            </head>
            <h2>Post-Check Status on '+ $date +'</h2>
        <body>'

for($i = 1; $i -gt -9; $i++){
    
    $a = $d.$i

    if($a.Server -eq $null)
    {
        break
    }
    $Row += "<div class='caption1'>"+ $a.Server +"</div><table class='tftable' border='1'>
                
                <tr>
                    <th style='background-color:#3399ff; font-size:15px; font-weight: bold; border-width: 1px;padding: 8px;border-style: solid;border-color: #729ea5;text-align:left;'>Services</th>
                </tr>
                <tr>
                    <th>Name</th>
                    <th>Display Name</th>
                    <th>Pre-StartType</th>
                    <th>Post-StartType</th>
                    <th>Pre-Status</th>
                    <th>Post-Status</th>
                    <th>Verify</th>
                </tr>"
    
    ForEach($name in $a.Services){
        $servicelist = Get-service -ComputerName $a.Server -Displayname $name.DisplayName | 
        Select MachineName, Name, DisplayName, 
        @{ n=’PostType’; e={$_.StartType}}, 
        @{ n=’PostStatus’; e={$_.Status}},
        @{ n='PreType'; e={ $name.StartType}},
        @{ n='PreStatus'; e={ $name.Status}},
        @{ n='Varify'; e= { if ( $_.StartType -ne $name.StartType -or $_.Status -ne $name.Status) {"&#10060;"} else {"&#127383;"}}}
       
        $Row += "<tr>
                    <td>"+ $servicelist.Name +"</td>
                    <td>"+ $servicelist.DisplayName +"</td>
                    <td>"+ $servicelist.PreType +"</td>
                    <td>"+ $servicelist.PostType +"</td>
                    <td>"+ $servicelist.PreStatus +"</td>
                    <td>"+ $servicelist.PostStatus +"</td>
                    <td class='"+ $servicelist.Varify +"'>"+ $servicelist.Varify +"</td>
                 </tr>"     
    }

    $Row += "<tr>
                <th style='background-color:#3399ff; font-size:15px; font-weight: bold; border-width: 1px;padding: 8px;border-style: solid;border-color: #729ea5;text-align:left;'>DB Status</th>
             </tr> 
             <tr>
                <th>Instance Name</th>
                <th>DB Name</th>
                <th>Pre-State</th>
                <th>Post-State</th>
                <th>Verify</th>
              </tr>" 
                   
    ForEach($name1 in $a.DBStatus){
        #$name1.Instance
       
        $l1 = ($name1.Instance).Replace("/","\")
        $Query = "SELECT state_desc AS State FROM sys.databases WHERE name='" + $name1.Name + "'"      
        $Result = Invoke-Sqlcmd -Query $Query -ServerInstance $l1        
        $sqlCount = 0
        ForEach($line in $Result){
            $DBVerify = if ( $name1.State -ne $line.State) {"&#10060;"} else {"&#127383;"}
            $Row += "<tr>
                        <td>"+ $name1.Instance +"</td>
                        <td>"+ $name1.Name +"</td>
                        <td class='"+ $name1.State +"'>"+ $name1.State +"</td>
                        <td class='"+ $line.State +"'>"+ $line.State +"</td>
                        <td>"+ $DBVerify +"</td>
                     </tr>"
        } 
    } 

$Row += "</table></br/br>"
}
$Row += "</body></html>"
Set-Content C:\PostCheck.html $Row
$Body = $Row
$SMTPClient.EnableSsl = $true
# Create the message
$mail = New-Object System.Net.Mail.Mailmessage $EmailFrom, $EmailTo, $Subject, $Body
$mail.IsBodyHTML=$true
$SMTPClient.Send($mail) 
